"""This script is supposed to generate the
pseudo genome for the barcodes.
"""
import itertools 
import argparse
from Bio import SeqIO  
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet.IUPAC import IUPACAmbiguousDNA

if __main__ == '__main__':

parser = argparse.ArgumentParser(
    description='Script to assemble the pseudo-ref. genome for the barcodes')
parser.add_argument('fasta_output', type=str, 
                    help='Output file location as fasta format')

output_file = parser.output

# sequences from scott's perl script
#Index read1;Tn5 barcode i7
index_reads_1 = 'ATTACTCG TCCGGAGA CGCTCATT GAGATTCC ATTCAGAA GAATTCGT CTGAAGCT TAATGCGC CGGCTATG TCCGCGAA TCTCGCGC AGCGATAG'
#index Read 2; pcr barcode p7
index_reads_2 = 'TCGGATTCGG GCGGCTGCGG AGATTACGTT CTAACTAGGT CATAGCGACC CCGCTAAGAG ATGGAACGAA GCGTTCCGTT GGTTATCGAA GCATCGTATG AATACGATAA TTCCGTCGAC TCCGGCTTAT ACCAGGCGCA AGAGGAGAAT GTACTCCTAT GCTAACGGAT AGTTGAATCA TGATTAGGTA TCGTAGCATC TCTTGAGGTT AGGTCAGCTT TATTAGACTT CTCAATTAGT TCGCCGCCGG CCGTATGATT AACGCGCAGA CTCGTCGTAG CTAATTGCGA CGCGGCCATA AATATTACTT ATTGGCAGAT ATGGCGCCTG ATAAGGACTC TAGTAAGCCG ATTATGCAAG TTGGCAAGCC TTGATTGGCG GCATATGAGC GAACTCGACT CTAGCCAGCC TGCGACCTCT ATTCTTAGCT TTGATACGAT TATAATAGTT TTGCCGTAGG AGACCATATC TTGGTAAGGA CAGCTAGCGG CTAAGCCTTG CGTTACCGCT GACTGGACCA GCAAGACCGT TCAATCTCCT ATACCTCGAC TAGAGGCGTT TAGGTAACTT TTCGAATATT TGGACGACTA GTAGGCTGCA GTAGGATAAG CGTCGAGCGC ACTATTCATT TTGCTTAGAT CGAATGGAGC CTATATAGCC CTACTAATAA TGGTTGCCGT TCCTCTGCCG GATTCTTGAA GTAGCAGCTA CCTCAGCTCC AAGTAGCTCA TATTGCTGGA CCAGATACGG AACGAATTCG CGCTTATCGT AAGTACGCGA GATCTTCGCA TCTTAGCCTG TTATTGAGGC TTGCGAGCAT GCTTGAAGAG AGTCCGCTGC TAAGTCCTGA AGTTCTCATG CAGACTAAGG TCTATCGCTG GCGCTATGGT CATTATTATT AGCCGTAGTT TGATATTGCG ACGGCGTTAA GGCTTACTCC GCGCGTTCAT GAGCGCGATG'
#index read 3; Tn5 barcode i5
index_reads_3 = 'AGGCTATA GCCTCTAT AGGATAGG TCAGAGCC CTTCGCCT TAAGATTA ACGTCCTG GTCAGTAC'
#index read4;pcr barcode p5
index_reads_4 = 'CTCGATGGAG CGACTACCAA GTTGACGGCC CTCGTCTAGG GCTCTAACGA TGATAGAACG TTAGATTCCG GATCAGTCAT TCGATATTGA CCAGGTCTAC TTGGTCATAA AACGGACCAA TTAACGTACC GGACTCATTG GAACTGCATC GGAACGATGG ACTCTCTCAA GTCGCTCAGT TGATTCCTCA CCGTCGGAGG AGCGTCAATG CGAAGGACGA TTGAGTATCA TGAGGTAGAA GTTCCGACGA TCATCTCGAT GACTAGTCTA CTGCTTCGAC CCTAGCGCCT AGTTGCATCT TCGTAGGCTT AATTGCCTAC CGCCGCCTCC CAAGTACTGG CGGCGAGACC GACCTCCGCC TCTAGAACTA CTAACTCCAA ACCAAGATCT CGATCATTAC GACCTCTCTG GGCTAATTAA CGAGTTAGAG GATGATCGTA GCTCTCGCCT ACTATCTTGA AGGTCAATTA AAGCCGGCTG CTCCGGTTCT CATGCATCTC TCCGGTAATC ACCGTTACGA TCCGTCGCCA GGCTATGACT TGGACTTGAC ACTTCCGAAT AACTACCGAC CGTCCGTCCT GGTCCAGGAG AACGAGGCTA ACGTTCAACC ACGAGGACCT TATAACTTCC AGGATTACCA AACCTAGCTT AGTCCGCGGA ACTATCCGCA CGAGCTGCCA GACCGTAGCA GTCATTGCGC CAAGATTAAG ACGCAACTCC TGATACGAGT CATTATTACC TCTATAAGGA TTGGAGTCGG CAAGCTTGGC ATAGGATATG TGGCGTAGGT ACTGAATTCC TTCTACGCCA TGGCCGCAAT CCAAGCTGAA TGCCAGATGG AACTTATAAG TCATCTAATC AGATCCTATA CCTATAAGCT GATTGCAGAC ATAAGAGGCG AAGATCCAAC CTGCAATCGC GCAACTGGCA GATACCTAAG GGTAGGTCTC CTCGGTCAAT'

# split the strings
index_reads_1 = index_reads_1.split(' ')
index_reads_2 = index_reads_2.split(' ')
index_reads_3 = index_reads_3.split(' ')
index_reads_4 = index_reads_4.split(' ')

record_list = []

# loop over all combinations of indices and store them in a pseudo-ref. genome in fasta format
for index, combination in enumerate(itertools.product(index_reads_1, 
                                                      index_reads_2, 
                                                      index_reads_3, 
                                                      index_reads_4)):
    record_list.append(SeqRecord(Seq(combination[0] + 
                                     'N' * 20 +
                                     combination[1]
                                     'N' * 20 +
                                     combination[2]
                                     'N' * 20 +
                                     combination[3], IUPACAmbiguousDNA),
                                  id='index{}'.format(index))) 

SeqIO.write(record_list, output_file, "fasta")
